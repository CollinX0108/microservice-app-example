trigger:
  branches:
    include:
      - master
  paths:
    include:
      - infra/*

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: KubernetesManifest@0
  inputs:
    action: 'deploy'
    kubernetesServiceConnection: 'aks-microservices-connection'
    namespace: 'microservices'
    manifests: |
      infra/k8s/namespace.yml
      infra/k8s/redis.yml
      infra/k8s/zipkin.yml
      infra/k8s/ingress.yml
    
- task: Kubernetes@1
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'aks-microservices-connection'
    command: 'get'
    arguments: 'pods,services,ingress -n microservices'

# Escalar cada deployment a 1 réplica
- task: Kubernetes@1
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'aks-microservices-connection'
    command: 'scale'
    arguments: 'deployment -n microservices frontend auth-api todos-api users-api log-message-processor zipkin redis --replicas=1'

- task: Bash@3
  inputs:
    targetType: 'inline'
    script: |
      # Ejecutar el script de inicio usando kubectl desde la conexión de Kubernetes
      chmod +x $(System.DefaultWorkingDirectory)/infra/start-services.sh
      KUBECONFIG=$(echo ~)/.kube/config $(System.DefaultWorkingDirectory)/infra/start-services.sh 