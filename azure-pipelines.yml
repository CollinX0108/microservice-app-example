# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  - main

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'your-acr-service-connection'
  containerRegistry: 'your-acr-name.azurecr.io'
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build and Push Images
  jobs:
  - job: BuildAndPush
    displayName: Build and Push
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    # Auth API
    - task: Docker@2
      displayName: Build Auth API
      inputs:
        command: build
        repository: $(containerRegistry)/auth-api
        dockerfile: auth-api/Dockerfile
        tags: |
          $(tag)
          latest

    - task: Docker@2
      displayName: Push Auth API
      inputs:
        command: push
        repository: $(containerRegistry)/auth-api
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

    # Users API
    - task: Docker@2
      displayName: Build Users API
      inputs:
        command: build
        repository: $(containerRegistry)/users-api
        dockerfile: users-api/Dockerfile
        tags: |
          $(tag)
          latest

    - task: Docker@2
      displayName: Push Users API
      inputs:
        command: push
        repository: $(containerRegistry)/users-api
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

    # Todos API
    - task: Docker@2
      displayName: Build Todos API
      inputs:
        command: build
        repository: $(containerRegistry)/todos-api
        dockerfile: todos-api/Dockerfile
        tags: |
          $(tag)
          latest

    - task: Docker@2
      displayName: Push Todos API
      inputs:
        command: push
        repository: $(containerRegistry)/todos-api
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

    # Frontend
    - task: Docker@2
      displayName: Build Frontend
      inputs:
        command: build
        repository: $(containerRegistry)/frontend
        dockerfile: frontend/Dockerfile
        tags: |
          $(tag)
          latest

    - task: Docker@2
      displayName: Push Frontend
      inputs:
        command: push
        repository: $(containerRegistry)/frontend
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

    # Log Message Processor
    - task: Docker@2
      displayName: Build Log Processor
      inputs:
        command: build
        repository: $(containerRegistry)/log-message-processor
        dockerfile: log-message-processor/Dockerfile
        tags: |
          $(tag)
          latest

    - task: Docker@2
      displayName: Push Log Processor
      inputs:
        command: push
        repository: $(containerRegistry)/log-message-processor
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
          latest

- stage: Deploy
  displayName: Deploy to AKS
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy to AKS
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes
            inputs:
              action: deploy
              manifests: |
                infra/k8s/namespace.yml
                infra/k8s/redis.yml
                infra/k8s/zipkin.yml
                infra/k8s/auth.yml
                infra/k8s/log-message-processor.yml
                infra/k8s/ingress.yml
                users-api/k8s/*.yml
                todos-api/k8s/*.yml
                frontend/k8s/*.yml
              containers: |
                $(containerRegistry)/auth-api:$(tag)
                $(containerRegistry)/users-api:$(tag)
                $(containerRegistry)/todos-api:$(tag)
                $(containerRegistry)/frontend:$(tag)
                $(containerRegistry)/log-message-processor:$(tag)
